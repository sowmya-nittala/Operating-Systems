From 4d1fd5a118d0b3fd781f6af0983503ef10c250fa Mon Sep 17 00:00:00 2001
From: Sowmya Nittala <sn2826@nyu.edu>
Date: Tue, 10 Nov 2020 13:44:05 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 31 ++++++++++++++++++++++++++++++-
 proc.h    |  1 +
 syscall.c |  3 ++-
 syscall.h |  2 ++
 sysproc.c | 15 +++++++++++++++
 user.h    |  2 +-
 usys.S    |  1 +
 8 files changed, 53 insertions(+), 3 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\

 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..e14bab3 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets=20;
   release(&ptable.lock);

   // Allocate kernel stack.
@@ -265,12 +266,28 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+int lottery_Total(void){
+
+  struct proc *p;
+  int ticket_aggregate=0;
+  for (p=ptable.proc;p<&ptable.proc[NPROC];p++)
+   {
+     if (p->state==RUNNABLE)
+	{ ticket_aggregate+=p->tickets;
+
+
+	}
+   }
+return ticket_aggregate;
+}
 void
 scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
-
+  int cnt=0;
+  long selected=0;
+  int total_tickets=0;
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -280,10 +297,21 @@ scheduler(void)

     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    cnt=0;
+    selected=0;
+    total_tickets=0;
+    total_tickets=lottery_Total();
+    selected=random_at_most(total_tickets);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;

+        if((cnt+p->tickets)<selected)
+    	{
+    	  cnt=cnt+p->tickets;
+    	  continue;
+    	}
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -296,6 +324,7 @@ scheduler(void)

       // Process is done running for now.
       // It should have changed its p->state before coming back.
+      break;
       proc = 0;
     }
     release(&ptable.lock);
diff --git a/proc.h b/proc.h
index 3b9c3ac..c5fa531 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
 };

 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..d194c37 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,7 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
-
+extern int sys_settickets(void);
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
@@ -123,6 +123,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };

 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..f7420ac 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,5 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
+
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..793d141 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,18 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void)
+{
+  int ticket_no;
+  if(argint(0,&ticket_no)>=0)
+  {
+    proc->tickets=ticket_no;
+  }
+  else
+  {
+    proc->tickets=20;
+  }
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..0ddc81c 100644
--- a/user.h
+++ b/user.h
@@ -24,7 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
-
+int settickets(int);
 // ulib.c
 int stat(char*, struct stat*);
 char* strcpy(char*, char*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
--
1.9.1
